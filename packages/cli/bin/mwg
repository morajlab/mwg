#!/usr/bin/env bash

ROOT_PATH=$(dirname $(dirname $(dirname $(dirname $0))))
TEMPLATES_PATH=$ROOT_PATH/packages/templates.list.d
CACHE_PATH=$HOME/.mwg_cache

# Private functions
__get_temp_paths() {
  local search_path=$TEMPLATES_PATH
  local user_temp_list_path=/etc/mwg/templates.list.d

  if [ -d "$user_temp_list_path" ]; then
    search_path+=" $user_temp_list_path"
  fi

  while IFS= read -r template; do
    realpath $template
  done < <(find $search_path -name '*.mwg')
}

__verify_template() {
  local found=1
  local template_name=
  local template_path=

  while IFS= read -r template; do
    template_name=$(basename $template)

    if [ "${template_name%.mwg}" == "$1" ]; then
      found=$((--found))
      template_path=$template
    fi

    if [ "$found" == "-1" ]; then
      echo ">>> ERROR  : template '$1' is duplicated."
      exit 1
    fi
  done < <(__get_temp_paths)

  if [ "$found" == "1" ]; then
    echo ">>> ERROR  : template '$1' not found."
    exit 1
  fi

  if [ ! -s "$template_path" ]; then
    echo ">>> ERROR  :: source list '$template_path' is not valid."
    exit 1
  fi

  echo "$template_path"
}

__show_parsed_data() {
  if [ "$1" == "0" ]; then
    echo $3
  else
    echo $2 $3
  fi
}

__normalize_string() {
  local string=${1%\"}
  string=${string#\"}

  echo "$string"
}

__parse_mwg_config() {
  local template_path=$1
  local target_key=
  local get_value=1
  local key=
  local value=
  local __show_parsed_data_alias="__show_parsed_data"

  while [ "$#" -gt 0 ]; do
    case "${1^^}" in
      "--KEY" | "-K")
        target_key=$2

        shift
        shift
      ;;
      "--VALUE" | "-V")
        get_value=0

        shift
      ;;
      *)
        shift
      ;;
    esac
  done

  __show_parsed_data_alias+=" $get_value"

  while IFS= read -r line; do
    key=$(__normalize_string $(echo $line | cut -d '=' -f 1))
    value=$(__normalize_string $(echo $line | cut -d '=' -f 2))

    if [ ! -z "$target_key" ]; then
      if [ "$target_key" == "$key" ]; then
        $__show_parsed_data_alias $key $value
      fi
    else
      $__show_parsed_data_alias $key $value
    fi
  done < $template_path
}

__cache() {
  local repository_url=${1%.git}
  local temp_dir_name=$(basename $repository_url)
  local temp_cache_path=$CACHE_PATH/$temp_dir_name

  if [ ! -d "$CACHE_PATH" ]; then
    mkdir -p "$CACHE_PATH"
  fi

  if [ ! -d "$temp_cache_path" ]; then
    local TMP_PATH=$(mktemp -d)

    (
      cd "$TMP_PATH"
      curl -L -o "$temp_dir_name.zip" "$repository_url/archive/refs/heads/master.zip" &> /dev/null
      unzip "$temp_dir_name.zip" -d "$temp_dir_name" &> /dev/null
      cp -r ./$temp_dir_name/* "$temp_cache_path"
      cd ..
      rm -rf "$TMP_PATH"
    )
  fi

  echo "$temp_cache_path"
}

# Public functions
generate() {
  local template=
  local template_path=
  local template_url=
  local temp_cache_path=
  local workspace_name='workspace_name'
  local workspace_description='workspace description'
  local path=$(pwd)

  shift

  while [ "$#" -gt 0 ]; do
    if [ -z $template ]; then
      template_path="$(__verify_template $1)"

      if [ "$?" != "0" ]; then
        echo $template_path
        exit $?
      fi

      template=$1

      shift
      continue
    fi

    case "${1^^}" in
      "--DESCRIPTION" | "-D")
        workspace_description=$2

        shift
        shift
      ;;
      "--NAME" | "-N")
        workspace_name=$2

        shift
        shift
      ;;
      "--PATH" | "-P")
        path=$2

        shift
        shift
      ;;
      *)
        shift
      ;;
    esac
  done

  if [ -z "$template" ]; then
    echo ">>> ERROR  :: template name is not specefied."
    exit 1
  fi

  template_url=$(__parse_mwg_config $template_path --key repository --value)
  temp_cache_path=$(__cache $template_url)

  if [ "$?" != "0" ]; then
    echo $temp_cache_path
    exit $?
  fi

  local TMP_PATH=$(mktemp -d)

  cp -r $temp_cache_path/* "$TMP_PATH" && \
  bash "$TMP_PATH/generate.sh" \
    --name "$workspace_name" --desc "$workspace_description" && \
  cp -r "$TMP_PATH/files" "$path" && \
  rm -rf "$TMP_PATH" && \
  echo ">>> SUCCESS:: workspace generated at '$path'"
}
g() {
  generate "$@"
}

list() {
  # TODO: show templates information in table
  __get_temp_paths
}
l() {
  list "$@"
}

if [[ $1 = __* ]] || [ "$(type -t $1)" != 'function' ]; then
  echo ">>> ERROR  :: argument '$1' is invalid."
  exit 1
fi

$1 "$@"
